<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Maestro</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
  <% if (isMobile) { %>
    <%- include('partials/header_mobile') %>
  <% } else { %>
    <%- include('partials/header_desktop') %>
  <% } %>
  <!--Calendar section-->
  <div id="selectedDate" class="font-semibold text-center text-xl mb-4 mt-2"></div>
  <div class="mx-auto w-full max-w-md p-4 bg-white shadow-md rounded-lg">
        <div class="flex items-center justify-between mb-4">
            <button id="prevMonth" class="px-2 py-1 text-gray-700 bg-gray-200 rounded"><</button>
            <h2 id="monthYear" class="text-lg font-semibold"></h2>
            <button id="nextMonth" class="px-2 py-1 text-gray-700 bg-gray-200 rounded">></button>
        </div>
      <!--Days of the week-->
        <div class="grid grid-cols-7 gap-2 text-center">
            <div class="font-semibold">Mon</div>
            <div class="font-semibold">Tue</div>
            <div class="font-semibold">Wed</div>
            <div class="font-semibold">Thu</div>
            <div class="font-semibold">Fri</div>
            <div class="font-semibold">Sat</div>
            <div class="font-semibold">Sun</div>
        </div>
        <div id="calendarDays" class="grid grid-cols-7 gap-2 text-center mt-2"></div>
    </div>

    <script>
        const monthYear = document.getElementById("monthYear");
        const calendarDays = document.getElementById("calendarDays");
        const prevMonth = document.getElementById("prevMonth");
        const nextMonth = document.getElementById("nextMonth");
        const selectedDateLabel = document.getElementById('selectedDate');

        //Get the date from the URL query if present
        const urlParams = new URLSearchParams(window.location.search);
        let currentDate = urlParams.has('date') ? new Date(urlParams.get('date')) : new Date();
        selectedDateLabel.textContent = `${currentDate.toLocaleDateString('en-GB', {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        })}`;

        //Function to render the calendar
        function renderCalendar() {
            calendarDays.innerHTML = "";
            let year = currentDate.getFullYear();
            let month = currentDate.getMonth();
            let firstDay = new Date(year, month, 1).getDay();
            let lastDay = new Date(year, month + 1, 0).getDate();

            firstDay = firstDay == 0 ? 6 : firstDay - 1;

            monthYear.textContent = new Intl.DateTimeFormat('en-GB', {month: 'long', year: 'numeric'}).format(currentDate);

            //Create empty cells
            for (let i = 0; i < firstDay; i++) {
                calendarDays.innerHTML += `<div></div>`;
            }

            //Fill day cells with click redirection
            for (let day = 1; day <= lastDay; day++) {
                const dayCell = document.createElement('div');
                dayCell.classList.add('p-2', 'rounded', 'bg-gray-200', 'cursor-pointer');
                dayCell.textContent = day;

                dayCell.addEventListener('click', () => {
                    currentDate.setDate(day);
                    const selectedDate = new Date(currentDate);
                    //Fix timezone issues
                    selectedDate.setHours(12, 0, 0, 0); 
                    const formattedDate = selectedDate.toISOString().split('T')[0];
                    window.location.href = `/macroTracker?date=${formattedDate}`;
                });

                calendarDays.appendChild(dayCell);
            }
        }

        //Navigation button event handlers
        prevMonth.addEventListener("click", () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            renderCalendar();
        });

        nextMonth.addEventListener("click", () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            renderCalendar();
        });

        renderCalendar();
    </script>

  <!--Pie chart display for daily macros -->
  <div id="container-div" class="flex flex-col md:flex-row items-center justify-center p-6 ">
    <div id="pieChart">
      <canvas id="pie-chart" class="w-96 h-96 pb-3"></canvas>
      <div class="text-center">
        <h1>
          <%= chartData ? 'Daily Calories: ' + chartData.totalcalories : 'no data for today. Create an entry.' %>
        </h1>
      </div>
    </div>
  </div>

  <div class="max-w-4xl mx-auto px-6 py-6">
    <h2 class="text-2xl font-bold mb-4">Add Food Entries</h2>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">

      <div class="meal-section bg-gray-50 p-4 rounded shadow">
        <h3 class="text-xl font-bold mb-2">Breakfast</h3>
        <div class="add-food-button border-2 border-dotted border-gray-400 p-4 my-2 cursor-pointer" onclick="addFoodInput('breakfast')"> + Add Food </div>
        <div id="breakfast-foods"></div>
        <button type="button" onclick="submitMeal('breakfast')" class="bg-blue-500 text-white px-4 py-2 rounded mt-2">
          Submit
        </button>
      </div>

      <div class="meal-section bg-gray-50 p-4 rounded shadow">
        <h3 class="text-xl font-bold mb-2">Lunch</h3>
        <div class="add-food-button border-2 border-dotted border-gray-400 p-4 my-2 cursor-pointer" onclick="addFoodInput('lunch')">+ Add Food</div>
        <div id="lunch-foods"></div>
        <button type="button" onclick="submitMeal('lunch')" class="bg-blue-500 text-white px-4 py-2 rounded mt-2">
          Submit
        </button>
      </div>

      <div class="meal-section bg-gray-50 p-4 rounded shadow">
        <h3 class="text-xl font-bold mb-2">Dinner</h3>
        <div class="add-food-button border-2 border-dotted border-gray-400 p-4 my-2 cursor-pointer" onclick="addFoodInput('dinner')">+ Add Food</div>
        <div id="dinner-foods"></div>
        <button type="button" onclick="submitMeal('dinner')" class="bg-blue-500 text-white px-4 py-2 rounded mt-2">
          Submit
        </button>
      </div>

      <div class="meal-section bg-gray-50 p-4 rounded shadow">
        <h3 class="text-xl font-bold mb-2">Snacks</h3>
        <div class="add-food-button border-2 border-dotted border-gray-400 p-4 my-2 cursor-pointer" onclick="addFoodInput('snacks')">+ Add Food</div>
        <div id="snacks-foods"></div>
        <button type="button" onclick="submitMeal('snacks')" class="bg-blue-500 text-white px-4 py-2 rounded mt-2">
          Submit
        </button>
      </div>
    </div>
  </div>

  <div id="successDropdown" class="hidden fixed top-4 left-1/2 transform -translate-x-1/2 bg-green-500 text-white px-4 py-2 rounded shadow-lg transition-all duration-300"></div>
  <div id="errorDropdown" class="hidden fixed top-4 left-1/2 transform -translate-x-1/2 bg-red-500 text-white px-4 py-2 rounded shadow-lg transition-all duration-300"></div>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    window.macroChart=null;

    //Inject data from backend
    let chartData = <%- JSON.stringify(chartData) %>;
    console.log(chartData);

    //Initialize pie chart
    window.macroChart = new Chart(document.getElementById('pie-chart'), {

      type: 'pie',
      data: {
        labels: ['Protein', 'Carbohydrates', 'Fat'],
        datasets: [{
          backgroundColor: ['#e53d19', '#3ee519', '#1944e5'],
          data: [
            chartData ? chartData.totalprotein : 0,
            chartData ? chartData.totalcarbs : 0,
            chartData ? chartData.totalfats : 0
          ]
        }]
      },
      options: {
        title: {
          display: true,
          text: 'Daily Macros Pie Chart'
        },
        responsive: true
      }
    });

    //Recalculate chart macros from added inputs
    function recalcMacros(){
      let baseProtein = chartData ? chartData.totalprotein : 0;
      let baseCarbs   = chartData ? chartData.totalcarbs   : 0;
      let baseFats    = chartData ? chartData.totalfats    : 0;

      let addedProtein = 0;
      let addedCarbs   = 0;
      let addedFats    = 0;
      //Protein sum
      document.querySelectorAll("input[name$='_protein[]']").forEach(input => {
        addedProtein+=parseFloat(input.value) || 0;
      });
      //Carb sum
      document.querySelectorAll("input[name$='_carbs[]']").forEach(input => {
        addedCarbs+=parseFloat(input.value) || 0;
      });
      //Fat sum
      document.querySelectorAll("input[name$='_fats[]']").forEach(input => {
        addedFats+=parseFloat(input.value) || 0;
      });
      window.macroChart.data.datasets[0].data = [
        baseProtein + addedProtein,
        baseCarbs + addedCarbs,
        baseFats + addedFats
      ];
      window.macroChart.update();
    }

    //Show error dropdown
    function showError(message) {
      const errorDropdown = document.getElementById("errorDropdown");
      errorDropdown.innerText = message;
      errorDropdown.classList.remove("hidden");
      setTimeout(() => {
        errorDropdown.classList.add("hidden");
      }, 3000);
    }

    //Show success dropdown
    function showSuccess(message) {
      const successDropdown = document.getElementById("successDropdown");
      successDropdown.innerText = message;
      successDropdown.classList.remove("hidden");
      setTimeout(() => {
        successDropdown.classList.add("hidden");
      }, 3000);
    }

    //Add input fields for a meal
    function addFoodInput(mealType){
    const container= document.getElementById(`${mealType}-foods`);
    const foodDiv = document.createElement('div');
    foodDiv.classList.add('food-entry', 'my-2', 'p-2', 'bg-white', 'shadow');
    foodDiv.innerHTML = `
    <input type="text" name="${mealType}_food_name[]" placeholder="Food Name" class="border p-1 mr-2" />
    <input type="number" name="${mealType}_calories[]" placeholder="Calories" class="border p-1 mr-2" />
        <input type="number" name="${mealType}_protein[]" placeholder="Protein" class="border p-1 mr-2" />
        <input type="number" name="${mealType}_fats[]" placeholder="Fats" class="border p-1 mr-2" />
        <input type="number" name="${mealType}_carbs[]" placeholder="Carbs" class="border p-1" />
    `;
    container.appendChild(foodDiv);

    foodDiv.querySelectorAll("input[type='number']").forEach(input => {
      input.addEventListener('input', recalcMacros);
    });
    recalcMacros();
    }

    //Submit meal data to server
    async function submitMeal(mealType) {
      const container = document.getElementById(`${mealType}-foods`);
      const foodEntries = container.querySelectorAll('.food-entry');
      if (foodEntries.length === 0) {
        showError('Please add at least one food entry for ' + mealType);
        return;
      }
      let totalCalories = 0, totalProtein = 0, totalFats = 0, totalCarbs = 0;
      //Aggregate totals from input fields
      foodEntries.forEach(entry => {
        const calories = parseFloat(entry.querySelector(`input[name="${mealType}_calories[]"]`).value) || 0;
        const protein  = parseFloat(entry.querySelector(`input[name="${mealType}_protein[]"]`).value) || 0;
        const fats     = parseFloat(entry.querySelector(`input[name="${mealType}_fats[]"]`).value) || 0;
        const carbs    = parseFloat(entry.querySelector(`input[name="${mealType}_carbs[]"]`).value) || 0;
        totalCalories += calories;
        totalProtein  += protein;
        totalFats     += fats;
        totalCarbs    += carbs;
      });
      //Submit via fetch to server
      try {
        const response = await fetch('/macroTracker/updateDailyMacros', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            calories: totalCalories,
            protein: totalProtein,
            fats: totalFats,
            carbs: totalCarbs,
            meal: mealType
          })
        });
        //Handle server response
        if (response.ok) {
          const data = await response.json();
          window.macroChart.data.datasets[0].data = [
            data.totalprotein,
            data.totalcarbs,
            data.totalfats];
          window.macroChart.update();
          showSuccess(mealType.charAt(0).toUpperCase() + mealType.slice(1) + ' macros updated successfully!');
        }
        else {
          const errorMessage = await response.text();
          showError('Error: ' + errorMessage);
        }
      } catch (error) {
        console.error('Request failed:', error);
        showError('Could not connect to the server. Please try again.');
      }
    }

  </script>
</body>
</html>

